{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Inicio","text":""},{"location":"#bienvenido-al-mkdocs-de-alfonso-ramirez-mestanza","title":"Bienvenido al Mkdocs de Alfonso Ram\u00edrez Mestanza","text":"<p>En este mkdocs, encontrar\u00e1s todas las pr\u00e1cticas de la asignatura de <code>Despligue de Aplicaciones Web</code> del alumno <code>Alfonso Ram\u00edrez Mestanza</code> de <code>2\u00ba DAW-B</code> del instituto <code>IES Gran Capit\u00e1n</code>.</p>"},{"location":"practica2-1/","title":"Practica 2.1 - Instalaci\u00f3n y configuraci\u00f3n de un servidor web Nginx","text":""},{"location":"practica2-1/#1-instalacion-servidor","title":"1.- Instalaci\u00f3n servidor","text":"<p>Para instalar el servidor de NGINX en nuestra m\u00e1quina Debian, lo primero que tendremos que hacer es actualizar los repositorios con: <code>sudo apt update</code></p> <p> Despu\u00e9s lo que tenemos que hacer es instalar el paquete correspondiente para instalar nginx: <code>sudo apt install nginx</code></p> <p> Cuando estemos en el proceso de instalaci\u00f3n aparecer\u00e1 un mensaje de '\u00bfDesea continuar? [S/n]', en el cu\u00e1l le deberemos decir que s\u00ed.</p> <p>Ahora tendremos que comprobar que nginx se ha instalado y este funcionando correctamente con el comando: <code>systemctl status nginx</code></p> <p>  Si todo est\u00e1 correcto, veremos un mensaje en verde: <code>active (running)</code></p>"},{"location":"practica2-1/#2-creacion-de-las-carpeta-del-sitio-web","title":"2.- Creaci\u00f3n de las carpeta del sitio web","text":"<p>Al igual que en Apache, todos los archivos que formar\u00e1n parte de un sitio web se organiza en carpetas. Normalmente, estas carpetas van dentro de la ubicaci\u00f3n <code>\\var\\www</code>. Ahora crearemos la carpeta de nuestro sitio web dentro de la ruta mencionada anteriormente con el siguiente comando:  <code>sudo mkdir -p /var/www/nombre_web/html</code></p> <ul> <li>Donde <code>nombre_web</code> pondremos el nombre que queremos del sitio web sin espacios.</li> </ul> <p></p> <p>Ahora accedemos a esa carpeta:</p> <p></p> <p>Dentro de esa carpeta, deberemos clonar el siguiente repositorio de github: <code>https://github.com/cloudacademy/static-website-example</code>, en caso de no tener git instalado lo instalamos con <code>sudo apt install git</code>. </p> <p></p> <p>Ahora clonamos el repositorio con el comando <code>sudo git clone https://github.com/cloudacademy/static-website-example</code>.</p> <p></p> <p>Adem\u00e1s, haremos que el propietario de los datos de esa carpeta sea del usuario www-data, que normalmente es el usuario del servicio web. <code>sudo chown -R www-data:www-data /var/www/nombre_web/html</code>.</p> <p></p> <p>Y le damos los permisos adecuados para que no nos de un error de acceso no autorizado al entrar en el sitio web con <code>sudo chmod -R 755 /var/www/nombre_web</code>.</p> <p></p> <p>Ahora comprobamos que el servidor este funcionando y sirviendo p\u00e1ginas correctamente, para ello accedemos desde un navegador a: <code>http://IP-maq-virtual</code>.</p> <ul> <li>Donde <code>IP-maq-virtual</code> es la direcci\u00f3n IP de tu m\u00e1quina Debian. En caso de no saber cu\u00e1l es, hacemos un <code>ip -a</code>.</li> </ul> <p></p> <p>Ahora buscamos la direcci\u00f3n en el navegador de tu m\u00e1quina f\u00edsica con <code>http://IP_maq_virtual</code> donde nos tendr\u00e1 que aparecer la siguiente ventana:</p> <p></p> <p>Esto significa que de momento todo esta funcionando correctamente.</p>"},{"location":"practica2-1/#3-configuracion-de-servidor-web-nginx","title":"3.- Configuraci\u00f3n de servidor web NGINX","text":"<p>En Nginx hay dos rutas importantes. La primera es <code>sites-available</code>, que es donde se almacenan los archivos de configuraci\u00f3n de los host virtuales. Es decir, cada uno de los sitios web que est\u00e1 almacenado en el servidor.</p> <p>Por otro lado, est\u00e1 <code>sites-enabled</code>, que contiene los archivos que almacenan la configuraci\u00f3n de los sitios web que est\u00e1n habilitados.</p> <p>Por defecto, hay un archivo de configuraci\u00f3n dentro de <code>sites-available</code>, que es la p\u00e1gina web que hemos visto en el anterior paso.</p> <p>Para mostrar el contenido de nuetra web, debemos crear un bloque nuevo, para ello, crearemos un nuevo fichero de configuraci\u00f3n en la ruta y con el comando siguiente:  <code>sudo nano /etc/nginx/sites-available/tu_dominio</code></p> <p></p> <p>Y se nos abrir\u00e1 esta ventana completamente vac\u00eda </p> <p></p> <p>Dentro tendremos que poner este contenido para configurarlo correctamente:</p> <pre><code>server {\n\n        listen 80;\n        listen [::]:80;\n        root /ruta/absoluta/archivo/index;\n        index index.html index.htm index.nginx-debian.html;\n        server_name nombre_web;\n        location / {\n                try_files $uri $uri/ =404;\n        }\n}\n</code></pre> <p>En mi caso, la ruta ser\u00e1: <code>/var/www/html</code>, que es donde estan todos los archivos web y el nombre <code>alfonso2</code>.</p> <p></p> <p>Para guardar los cambios hacemos <code>Ctrl + O</code> y despu\u00e9s <code>Ctrl + X</code> para salir.</p> <p>Ahora crearemos un archivo simb\u00f3lico entre el archivo que acabamos de crear y el de sitios habilitados, para que as\u00ed, se de de alta autom\u00e1ticamente, para ello utilizaremos el siguiente comando:  <code>sudo ln -s /etc/nginx/sites-available/nombre_web /etc/nginx/sites-enabled/</code>, donde:</p> <ul> <li><code>nombre_web</code>, es el nombre que le dimos anteriormente al servidor.</li> </ul> <p></p> <p>Por \u00faltimo, reiniciamos el servidor de nginx para que la configuraci\u00f3n se aplique correctamente con: <code>sudo systemctl restart nginx</code>.</p> <p>Si no aparece ning\u00fan mensaje de error es que esta todo funcionando correctamente:</p> <p></p> <p>Por seguridad, para comprobar que el servidor esta activo, ponemos <code>sudo systemctl status nginx</code>.</p> <p></p> <p>Si todo est\u00e1 bien aparecera un mensaje en verde de: <code>active (running)</code></p>"},{"location":"practica2-1/#4-comprobaciones","title":"4.- Comprobaciones","text":"<p>Como a\u00fan no tenemos un servidor DNS que traduzca las IPs a nombres, deberemos hacerlo de forma manual editando nuestro archivo <code>/etc/hosts</code> de nuestra m\u00e1quina f\u00edsica para que as\u00ed asocie la IP de la m\u00e1quina virtual a nuestro nombre del server.</p> <p>En caso de estar en Linux, modificaremos el archivo: <code>/etc/hosts</code>.</p> <p>Y en Windows: <code>C:\\Windows\\System32\\drivers\\etc\\hosts</code>.</p> <p>En esa l\u00ednea a\u00f1adimos la direcci\u00f3n IP junto al nombre de nuestro servidor, de la siguiente manera: <code>192.168.X.X nombre_web</code>;</p> <p>En caso de no saber la direci\u00f3n IP de vuestro servidor, ponemos en la terminal de nuestra m\u00e1quina Debian <code>ip a</code>.</p> <p></p> <p>Ahora, a\u00f1adimos una l\u00ednea con lo mencionado anteriormente.</p> <p></p>"},{"location":"practica2-1/#5-ftp","title":"5.- FTP","text":"<p>En caso de querer tener varios sitios webs en el mismo servidor de nginx, tendremos que repetir todos los pasos anteriores con el nuevo nombre de dominio.</p>"},{"location":"practica2-1/#51-configurar-servidor-sftp-en-debian","title":"5.1.- Configurar servidor SFTP en Debian","text":"<p>En primer lugar, lo instalaremos desde los repositorios con estos comandos:</p> <p><code>sudo apt-get update &amp;&amp; sudo apt-get install vsftpd</code></p> <p></p> <p>Ahora creamos una carpeta en nuestro home de Debian con:  <code>mkdir /home/nombre_usuario/ftp</code>, donde:</p> <ul> <li><code>nombre_usuario</code> es el nombre del usuario en la m\u00e1quina virtual.</li> </ul> <p></p> <p>Ahora creamos un certificados de seguridad necesario para aportar la capa de cifrado de nuestra conexi\u00f3n a trav\u00e9s del comando: <code>sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/vsftpd.pem -out /etc/ssl/private/vsftpd.pem</code></p> <p></p> <p>Una vez puesto este comando, nos empezar\u00e1n a hacer distintas preguntas, las cuales podemos dejar en blanco o responder, en mi caso las dejo en blanco.</p> <p></p> <p>Una vez realizado este paso, configuraremos el archivo de configuraci\u00f3n de vsftpd con el comando: <code>sudo nano /etc/vsftpd.conf</code>.</p> <p>Primero buscamos estas l\u00edneas, las cuales tendremos que eliminar:</p> <pre><code>rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem\nrsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key\nssl_enable=NO\n</code></pre> <p></p> <p>Y ponemos lo siguiente: </p> <pre><code>rsa_cert_file=/etc/ssl/private/vsftpd.pem\nrsa_private_key_file=/etc/ssl/private/vsftpd.pem\nssl_enable=YES\nallow_anon_ssl=NO\nforce_local_data_ssl=YES\nforce_local_logins_ssl=YES\nssl_tlsv1=YES\nssl_sslv2=NO\nssl_sslv3=NO\nrequire_ssl_reuse=NO\nssl_ciphers=HIGH\n\nlocal_root=/home/nombre_usuario/ftp\n</code></pre> <p></p> <p>Cuando guardemos los cambios, reiniciamos el servicio para que la nueva configuraci\u00f3n se habilite: <code>sudo systemctl restart --now vsftpd</code>. Si todo va bien, no nos aparecer\u00e1 ning\u00fan mensaje:</p> <p></p> <p>Tras acabar la configuraci\u00f3n, podremos acceder a nuestro servidor mediante un cliente de FTP, en mi caso ser\u00e1 Filezilla, el cu\u00e1l podemos descargar en nuestra m\u00e1quina f\u00edsica a trav\u00e9s de este enlace: FileZilla. </p> <p></p> <p>Cuando termine el proceso de instalaci\u00f3n, iniciamos la aplicacion y nos encontraremos con la siguiente ventana:</p> <p></p> <p>Deberemos configurarlo de la siguiente manera:</p> <ul> <li>Servidor, pondremos la direcci\u00f3n IP de la m\u00e1quina Debian.</li> <li>Nombre de usuario, pondremos el nombre de usuario de Debian.</li> <li>Contrase\u00f1a, pondremos la contrase\u00f1a del usuario</li> <li>Puerto, ser\u00e1 el 21 para conectarnos usando los certificados que hemos generado antes.   Quedar\u00eda de la siguiente manera:</li> </ul> <p></p> <p>Ahora damos clic en <code>Conexi\u00f3n r\u00e1pida</code> y nos saltar\u00e1 un aviso a prop\u00f3sito del certificado, pulsamos en aceptar ya que este peligro lo hemos generado nosotros mismos:</p> <p></p> <p>Una vez que ya estemos conectados, buscaremos en la secci\u00f3n izquierda de la pantalla la carpeta donde tengamos el <code>.zip</code> y en la parte derecha seleccionaremos la carpeta donde queremos subirla, haciendo doble click o utilizando el <code>bot\u00f3n derecho &gt; subir</code>.</p> <p></p> <p>Otra opci\u00f3n es conectarnos mediante SFTP, que para ello tendriamos que:</p> <ul> <li>En servidor pondremos: <code>sftp://direcci\u00f3n_ip</code></li> <li>Quitaremos la contrase\u00f1a.</li> <li>Pondremos el puerto 22.</li> </ul> <p>Quedar\u00eda de la siguiente manera:</p> <p></p> <p>Hacemos click en <code>Conexi\u00f3n r\u00e1pida</code> y empezar\u00e1 a conectarnos con el servidor Debian. Devido a que estamos usando claves FTP para conectarnos, nos aparecer\u00e1 un aviso parecido al que nos sal\u00eda al conectarnos por primera vez por SSH a nuestra Debian, que aceptamos porque sabemos que no entra\u00f1a ning\u00fan peligro en este caso:</p> <p></p> <p>Aqu\u00ed nos conecta al <code>/home</code> del usuario, en vez de al <code>ftp</code>. Como vemos si accedemos al directorio <code>/ftp</code>, aparece el archivo que hemos subido anteriormente.</p> <p></p> <p>Ahora vamos a descomprimir el archivo desde nuestra m\u00e1quina Debian, para ello usamos el comando: <code>unzip nombre_archivo.zip -d /nombre/directorio</code>:</p> <p></p> <p>Una vez ese paso est\u00e1 completado, veremos que el archivo se encuentra en el directorio donde lo hab\u00edamos descomprimido, que en mi caso es en el escritorio.</p> <p></p>"}]}