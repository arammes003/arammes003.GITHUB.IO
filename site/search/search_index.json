{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Inicio","text":""},{"location":"#bienvenido-al-mkdocs-de-alfonso-ramirez-mestanza","title":"Bienvenido al Mkdocs de Alfonso Ram\u00edrez Mestanza","text":"<p>En este mkdocs, encontrar\u00e1s todas las pr\u00e1cticas de la asignatura de <code>Despligue de Aplicaciones Web</code> del alumno <code>Alfonso Ram\u00edrez Mestanza</code> de <code>2\u00ba DAW-B</code> del instituto <code>IES Gran Capit\u00e1n</code>.</p>"},{"location":"practica2-1/","title":"Practica 2.1 - Instalaci\u00f3n y configuraci\u00f3n de un servidor web Nginx","text":""},{"location":"practica2-1/#1-instalacion-servidor","title":"1.- Instalaci\u00f3n servidor","text":"<p>Para instalar el servidor de NGINX en nuestra m\u00e1quina Debian, lo primero que tendremos que hacer es actualizar los repositorios con: <code>sudo apt update</code></p> <p> Despu\u00e9s lo que tenemos que hacer es instalar el paquete correspondiente para instalar nginx: <code>sudo apt install nginx</code></p> <p> Cuando estemos en el proceso de instalaci\u00f3n aparecer\u00e1 un mensaje de '\u00bfDesea continuar? [S/n]', en el cu\u00e1l le deberemos decir que s\u00ed.</p> <p>Ahora tendremos que comprobar que nginx se ha instalado y este funcionando correctamente con el comando: <code>systemctl status nginx</code></p> <p>  Si todo est\u00e1 correcto, veremos un mensaje en verde: <code>active (running)</code></p>"},{"location":"practica2-1/#2-creacion-de-las-carpeta-del-sitio-web","title":"2.- Creaci\u00f3n de las carpeta del sitio web","text":"<p>Al igual que en Apache, todos los archivos que formar\u00e1n parte de un sitio web se organiza en carpetas. Normalmente, estas carpetas van dentro de la ubicaci\u00f3n <code>\\var\\www</code>. Ahora crearemos la carpeta de nuestro sitio web dentro de la ruta mencionada anteriormente con el siguiente comando:  <code>sudo mkdir -p /var/www/nombre_web/html</code></p> <ul> <li>Donde <code>nombre_web</code> pondremos el nombre que queremos del sitio web sin espacios.</li> </ul> <p></p> <p>Ahora accedemos a esa carpeta:</p> <p></p> <p>Dentro de esa carpeta, deberemos clonar el siguiente repositorio de github: <code>https://github.com/cloudacademy/static-website-example</code>, en caso de no tener git instalado lo instalamos con <code>sudo apt install git</code>. </p> <p></p> <p>Ahora clonamos el repositorio con el comando <code>sudo git clone https://github.com/cloudacademy/static-website-example</code>.</p> <p></p> <p>Adem\u00e1s, haremos que el propietario de los datos de esa carpeta sea del usuario www-data, que normalmente es el usuario del servicio web. <code>sudo chown -R www-data:www-data /var/www/nombre_web/html</code>.</p> <p></p> <p>Y le damos los permisos adecuados para que no nos de un error de acceso no autorizado al entrar en el sitio web con <code>sudo chmod -R 755 /var/www/nombre_web</code>.</p> <p></p> <p>Ahora comprobamos que el servidor este funcionando y sirviendo p\u00e1ginas correctamente, para ello accedemos desde un navegador a: <code>http://IP-maq-virtual</code>.</p> <ul> <li>Donde <code>IP-maq-virtual</code> es la direcci\u00f3n IP de tu m\u00e1quina Debian. En caso de no saber cu\u00e1l es, hacemos un <code>ip -a</code>.</li> </ul> <p></p> <p>Ahora buscamos la direcci\u00f3n en el navegador de tu m\u00e1quina f\u00edsica con <code>http://IP_maq_virtual</code> donde nos tendr\u00e1 que aparecer la siguiente ventana:</p> <p></p> <p>Esto significa que de momento todo esta funcionando correctamente.</p>"},{"location":"practica2-1/#3-configuracion-de-servidor-web-nginx","title":"3.- Configuraci\u00f3n de servidor web NGINX","text":"<p>En Nginx hay dos rutas importantes. La primera es <code>sites-available</code>, que es donde se almacenan los archivos de configuraci\u00f3n de los host virtuales. Es decir, cada uno de los sitios web que est\u00e1 almacenado en el servidor.</p> <p>Por otro lado, est\u00e1 <code>sites-enabled</code>, que contiene los archivos que almacenan la configuraci\u00f3n de los sitios web que est\u00e1n habilitados.</p> <p>Por defecto, hay un archivo de configuraci\u00f3n dentro de <code>sites-available</code>, que es la p\u00e1gina web que hemos visto en el anterior paso.</p> <p>Para mostrar el contenido de nuetra web, debemos crear un bloque nuevo, para ello, crearemos un nuevo fichero de configuraci\u00f3n en la ruta y con el comando siguiente:  <code>sudo nano /etc/nginx/sites-available/tu_dominio</code></p> <p></p> <p>Y se nos abrir\u00e1 esta ventana completamente vac\u00eda </p> <p></p> <p>Dentro tendremos que poner este contenido para configurarlo correctamente:</p> <pre><code>server {\n\n        listen 80;\n        listen [::]:80;\n        root /ruta/absoluta/archivo/index;\n        index index.html index.htm index.nginx-debian.html;\n        server_name nombre_web;\n        location / {\n                try_files $uri $uri/ =404;\n        }\n}\n</code></pre> <p></p> <p>Para guardar los cambios hacemos <code>Ctrl + O</code> y despu\u00e9s <code>Ctrl + X</code> para salir.</p> <p>Ahora crearemos un archivo simb\u00f3lico entre el archivo que acabamos de crear y el de sitios habilitados, para que as\u00ed, se de de alta autom\u00e1ticamente, para ello utilizaremos el siguiente comando:  <code>sudo ln -s /etc/nginx/sites-available/nombre_web /etc/nginx/sites-enabled/</code>, donde:</p> <ul> <li><code>nombre_web</code>, es el nombre que le dimos anteriormente al servidor.</li> </ul> <p></p> <p>Por \u00faltimo, reiniciamos el servidor de nginx para que la configuraci\u00f3n se aplique correctamente con: <code>sudo systemctl restart nginx</code>.</p> <p>Si no aparece ning\u00fan mensaje de error es que esta todo funcionando correctamente:</p> <p></p> <p>Por seguridad, para comprobar que el servidor esta activo, ponemos <code>sudo systemctl status nginx</code>.</p> <p></p> <p>Si todo est\u00e1 bien aparecera un mensaje en verde de: <code>active (running)</code></p>"},{"location":"practica2-1/#4-comprobaciones","title":"4.- Comprobaciones","text":"<p>Como a\u00fan no tenemos un servidor DNS que traduzca las IPs a nombres, deberemos hacerlo de forma manual editando nuestro archivo <code>/etc/hosts</code> de nuestra m\u00e1quina f\u00edsica para que as\u00ed asocie la IP de la m\u00e1quina virtual a nuestro nombre del server.</p> <p>En caso de estar en Linux, modificaremos el archivo: <code>/etc/hosts</code>.</p> <p>Y en Windows: <code>C:\\Windows\\System32\\drivers\\etc\\hosts</code>.</p> <p>En esa l\u00ednea a\u00f1adimos la direcci\u00f3n IP junto al nombre de nuestro servidor, de la siguiente manera: <code>192.168.X.X nombre_web</code>;</p> <p>En caso de no saber la direci\u00f3n IP de vuestro servidor, ponemos en la terminal de nuestra m\u00e1quina Debian <code>ip a</code>.</p> <p></p> <p>Ahora, a\u00f1adimos una l\u00ednea con lo mencionado anteriormente.</p> <p></p>"},{"location":"practica2-1/#5-ftp","title":"5.- FTP","text":"<p>En caso de querer tener varios sitios webs en el mismo servidor de nginx, tendremos que repetir todos los pasos anteriores con el nuevo nombre de dominio.</p>"},{"location":"practica2-1/#51-configurar-servidor-sftp-en-debian","title":"5.1.- Configurar servidor SFTP en Debian","text":"<p>En primer lugar, lo instalaremos desde los repositorios con estos comandos:</p> <p><code>sudo apt-get update &amp;&amp; sudo apt-get install vsftpd</code></p> <p></p> <p>Ahora creamos una carpeta en nuestro home de Debian con:  <code>mkdir /home/nombre_usuario/ftp</code>, donde:</p> <ul> <li><code>nombre_usuario</code> es el nombre del usuario en la m\u00e1quina virtual.</li> </ul> <p></p> <p>Ahora creamos un certificados de seguridad necesario para aportar la capa de cifrado de nuestra conexi\u00f3n a trav\u00e9s del comando: <code>sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/vsftpd.pem -out /etc/ssl/private/vsftpd.pem</code></p> <p></p> <p>Una vez puesto este comando, nos empezar\u00e1n a hacer distintas preguntas, las cuales podemos dejar en blanco o responder, en mi caso las dejo en blanco.</p> <p></p> <p>Una vez realizado este paso, configuraremos el archivo de configuraci\u00f3n de vsftpd con el comando: <code>sudo nano /etc/vsftpd.conf</code>.</p> <p>Primero buscamos estas l\u00edneas, las cuales tendremos que eliminar:</p> <pre><code>rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem\nrsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key\nssl_enable=NO\n</code></pre> <p></p> <p>Y ponemos lo siguiente: </p> <pre><code>rsa_cert_file=/etc/ssl/private/vsftpd.pem\nrsa_private_key_file=/etc/ssl/private/vsftpd.pem\nssl_enable=YES\nallow_anon_ssl=NO\nforce_local_data_ssl=YES\nforce_local_logins_ssl=YES\nssl_tlsv1=YES\nssl_sslv2=NO\nssl_sslv3=NO\nrequire_ssl_reuse=NO\nssl_ciphers=HIGH\n\nlocal_root=/home/nombre_usuario/ftp\n</code></pre> <p></p> <p>Cuando guardemos los cambios, reiniciamos el servicio para que la nueva configuraci\u00f3n se habilite: <code>sudo systemctl restart --now vsftpd</code>. Si todo va bien, no nos aparecer\u00e1 ning\u00fan mensaje:</p> <p></p> <p>Tras acabar la configuraci\u00f3n, podremos acceder a nuestro servidor mediante un cliente de FTP, en mi caso ser\u00e1 Filezilla, el cu\u00e1l podemos descargar en nuestra m\u00e1quina f\u00edsica a trav\u00e9s de este enlace: FileZilla. </p> <p></p> <p>Cuando termine el proceso de instalaci\u00f3n, iniciamos la aplicacion y nos encontraremos con la siguiente ventana:</p> <p></p> <p>Deberemos configurarlo de la siguiente manera:</p> <ul> <li>Servidor, pondremos la direcci\u00f3n IP de la m\u00e1quina Debian.</li> <li>Nombre de usuario, pondremos el nombre de usuario de Debian.</li> <li>Contrase\u00f1a, pondremos la contrase\u00f1a del usuario</li> <li>Puerto, ser\u00e1 el 21 para conectarnos usando los certificados que hemos generado antes.   Quedar\u00eda de la siguiente manera:</li> </ul> <p></p> <p>Ahora damos clic en <code>Conexi\u00f3n r\u00e1pida</code> y nos saltar\u00e1 un aviso a prop\u00f3sito del certificado, pulsamos en aceptar ya que este peligro lo hemos generado nosotros mismos:</p> <p></p> <p>Una vez que ya estemos conectados, buscaremos en la secci\u00f3n izquierda de la pantalla la carpeta donde tengamos el <code>.zip</code> y en la parte derecha seleccionaremos la carpeta donde queremos subirla, haciendo doble click o utilizando el <code>bot\u00f3n derecho &gt; subir</code>.</p> <p></p> <p>Otra opci\u00f3n es conectarnos mediante SFTP, que para ello tendriamos que:</p> <ul> <li>En servidor pondremos: <code>sftp://direcci\u00f3n_ip</code></li> <li>Quitaremos la contrase\u00f1a.</li> <li>Pondremos el puerto 22.</li> </ul> <p>Quedar\u00eda de la siguiente manera:</p> <p></p> <p>Hacemos click en <code>Conexi\u00f3n r\u00e1pida</code> y empezar\u00e1 a conectarnos con el servidor Debian. Devido a que estamos usando claves FTP para conectarnos, nos aparecer\u00e1 un aviso parecido al que nos sal\u00eda al conectarnos por primera vez por SSH a nuestra Debian, que aceptamos porque sabemos que no entra\u00f1a ning\u00fan peligro en este caso:</p> <p></p> <p>Aqu\u00ed nos conecta al <code>/home</code> del usuario, en vez de al <code>ftp</code>. Como vemos si accedemos al directorio <code>/ftp</code>, aparece el archivo que hemos subido anteriormente.</p> <p></p> <p>Ahora vamos a descomprimir el archivo desde nuestra m\u00e1quina Debian, para ello usamos el comando: <code>unzip nombre_archivo.zip -d /nombre/directorio</code>.</p> <p></p> <p>Una vez ese paso est\u00e1 completado, veremos que el archivo se encuentra en el directorio donde lo hab\u00edamos descomprimido, que en mi caso es en el escritorio.</p> <p></p>"},{"location":"practica2-1/#6-https","title":"6.- HTTPS","text":"<p>En este apartado le a\u00f1adiremos a nuestro servidor una capa de seguridad necesaria por seguridad. Haremos que todos nuestros sitios web alojados hagan uso de certificados SSL y se acceda a ellos por medio de HTTPS.</p> <p>El primer paso ser\u00e1 generar un Certificado SSL, para ello usaremos el comando: <code>sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/nginx-selfsigned.key -out /etc/ssl/certs/nginx-selfsigned.crt</code> </p> <p>Nos pedir\u00e1 una serie de datos las cuales podemos dejar en blanco:</p> <p></p> <p>Ahora tendremos que configurar el fichero <code>/etc/nginx/sites-available/nombre_dominio</code>, a trav\u00e9s de <code>sudo nano</code> y pondremos lo siguiente:</p> <p></p> <p>Guardamos los cambios con <code>Ctrl + O</code> y salimos con <code>Ctrl + X</code>.</p> <p>Tras eso comprobamos que la sintaxis est\u00e9 bien con <code>sudo nginx -t</code>, si no hay problemas aparecer\u00e1 un mensaje de <code>syntax is ok</code>:</p> <p></p> <p>Ahora reiniciamos nuestro servidor de nginx para que se activen los cambios con <code>sudo systemctl restart nginx</code>. Si todo va bien no aparecer\u00e1 ning\u00fan mensaje de error:</p> <p></p> <p>Y en nuestra m\u00e1quina a\u00f1adimos la direcci\u00f3n ip de la m\u00e1quina Debian:</p> <p></p> <p>Y ya podemos acceder en nuestro navegador a la direcci\u00f3n y veremos la siguiente ventana:</p> <p></p>"},{"location":"practica2-1/#7-cuestiones-finales","title":"7.- Cuestiones finales","text":""},{"location":"practica2-1/#cuestion-1-que-pasa-si-no-hago-el-link-simbolico-entre-sites-available-y-sites-enabled-de-mi-sitio-web","title":"Cuesti\u00f3n 1: \u00bfQu\u00e9 pasa si no hago el link simb\u00f3lico entre <code>sites-available</code> y <code>sites-enabled</code> de mi sitio web?","text":"<p>Si no hacemos el enlace el stio web no ser\u00e1 visible, ya que el archivo que habilita los servidores web es <code>sites-enabled</code></p>"},{"location":"practica2-1/#cuestion-2-que-pasa-si-no-le-doy-los-permisos-adecuados-a-varwwwnombre_web","title":"Cuesti\u00f3n 2: \u00bfQu\u00e9 pasa si no le doy los permisos adecuados a <code>/var/www/nombre_web</code>?","text":"<p>Si no le damos los permisos adecuados, lo m\u00e1s probable es que ocurran problemas a la hora de intentar acceder al sitio web, ya que si no tenemos permisos de lectura y en algunos casos de ejecuci\u00f3n de archivos y directorios, podemos encontrarnos con errores a la hora de acceder como:</p> <ul> <li><code>403 Forbidden</code>, que ocurre cuando el servidor no tiene permiso para acceder al directorio.</li> </ul>"},{"location":"practica2-2/","title":"Pr\u00e1ctica 2.2 - Autenticaci\u00f3n en Nginx","text":""},{"location":"practica2-2/#paquetes-necesarios","title":"Paquetes necesarios","text":"<p>En primer lugar vemos si tenemos instalado el paquete necesario para hacer autenticaciones:  <code>dpkg -l | grep openssl</code></p> <p> Si no lo tenemos instalados, tendriamos que hacerlo.</p>"},{"location":"practica2-2/#1-creacion-de-usuarios-y-contrasenas-para-el-acceso-web","title":"1.- Creaci\u00f3n de usuarios y contrase\u00f1as para el acceso web","text":"<p>Creamos un archivo oculto llamado <code>.httpasswd</code> en el directorio de configuraci\u00f3n del servidor <code>/etc/nginx</code> donde guardaremos nuestros usuarios y contrase\u00f1as: </p> <p><code>sudo sh -c \"echo -n 'vuestro_nombre:' &gt;&gt; /etc/nginx/.htpasswd\"</code></p> <p>Y ahora creamos la contrase\u00f1a cifrada para el usuario: <code>sudo sh -c \"openssl passwd -apr1 &gt;&gt; /etc/nginx/.htpasswd\"</code> Justo al poner el comando, nos pedir\u00e1 que introduzcamos la contrase\u00f1a.</p> <p> Por cada usuario que queramos crear tenemos que seguir estos dos pasos.</p> <p>Ahora, crearemos dos usuarios, uno con tu nombre y otro con tu primer apellido:</p> <ul> <li> <p>Usuario 1:   </p> </li> <li> <p>Usuario 2:   </p> </li> </ul> <p>Ahora comprobamos que se han creado correctamente con <code>cat /etc/nginx/.htpasswd</code>:</p> <p></p>"},{"location":"practica2-2/#2-configurando-el-servidor-nginx-para-usar-autenticacion-basica","title":"2.- Configurando el servidor Nginx para usar autenticaci\u00f3n b\u00e1sica","text":"<p>Para configurar el acesso al servidor web con autenticaci\u00f3n, editaremos nuestro archivo donde se almacena el sitio con <code>sudo nano /etc/nginx/sites-available/nombre_web</code>. Donde nombre_web es el nombre que le pusiste a tu servidor web anteriormente.\u00b4</p> <p></p> <p>En <code>location</code> a\u00f1adiremos dos nuevas l\u00edneas:</p> <ul> <li><code>auth_basic</code>, le pondremos el nombre a nuestro dominio que ser\u00e1 mostrado al usuario al solicitar las credenciales.</li> <li><code>auth_basic_user_file</code>, para que utilice el fichero que previamente hemos creado con los usuarios y sus respectivas contrase\u00f1as.</li> </ul> <p> Una vez realizados esos cambios, reiniciamos el servicio para que aplique la configuraci\u00f3n de acceso: <code>sudo systemctl restart nginx</code>.</p> <p> Si todo va bien, no aparecer\u00e1 ning\u00fan mensaje.</p>"},{"location":"practica2-2/#3-probando-la-nueva-configuracion","title":"3.- Probando la nueva configuraci\u00f3n","text":""},{"location":"practica2-2/#comprobacion-1-comprueba-desde-tu-maquina-fisicaanfitrion-que-puedes-acceder-a-httpnombre-sitio-web-y-que-se-te-solicita-autenticacion","title":"Comprobaci\u00f3n 1: Comprueba desde tu m\u00e1quina f\u00edsica/anfitri\u00f3n que puedes acceder a <code>http://nombre-sitio-web</code> y que se te solicita autenticaci\u00f3n.","text":""},{"location":"practica2-2/#comprobacion-2-comprueba-que-si-decides-cancelar-la-autenticacion-se-te-negara-el-acceso-al-sitio-con-un-error-que-error-es","title":"Comprobaci\u00f3n 2: Comprueba que si decides cancelar la autenticaci\u00f3n, se te negar\u00e1 el acceso al sitio con un error. \u00bfQu\u00e9 error es?","text":"<p>Error 401: Authorization Required. </p>"},{"location":"practica2-2/#tareas","title":"Tareas","text":""},{"location":"practica2-2/#tarea-1-intenta-entrar-primero-con-un-usuario-erroneo-y-luego-con-otro-correcto-puedes-ver-todos-los-sucesos-y-registros-en-los-logs-accesslog-y-errorlog-adjunta-una-captura-de-pantalla-de-los-logs-donde-se-vea-que-intentas-entrar-primero-con-un-usuario-invalido-y-con-otro-valido-indica-donde-podemos-ver-los-errores-de-usuario-invalido-o-no-encontrado-asi-como-donde-podemos-ver-el-numero-de-error-que-os-aparecia-antes","title":"Tarea 1.- Intenta entrar primero con un usuario err\u00f3neo y luego con otro correcto. Puedes ver todos los sucesos y registros en los logs access.log y error.log  Adjunta una captura de pantalla de los logs donde se vea que intentas entrar primero con un usuario inv\u00e1lido y con otro v\u00e1lido. Indica d\u00f3nde podemos ver los errores de usuario inv\u00e1lido o no encontrado, as\u00ed como donde podemos ver el n\u00famero de error que os aparec\u00eda antes.","text":"<p>Primero, hemos probado con el usuario <code>mario ayuso</code>, el cu\u00e1l no existe en nuestro archivo <code>.htpasswd</code>. Y despu\u00e9s con <code>alfonso ramirez</code>, que si existe en dicho fichero.</p> <p>Accedemos al registro del fichero <code>error.log</code>, para comprobar que se ha guardado el registro del usuario que no existe intentando acceder con el comando: <code>sudo nano /var/log/nginx/error.log</code>.  Como podemos ver, el \u00faltimo mensaje es de ese usuario intentando acceder al servidor web <code>aramirez.com</code> provocando un error.</p> <p>Ahora accedemos al fichero <code>access.log</code> para comprobar los accesos de los distintos usuarios con <code>sudo nano /var/log/nginx/access.log</code>.</p> <p></p> <p>En primer lugar, encontramos el usuario inexistente <code>mario ayuso</code> que ha tenido un Error 401 y seguidamente el usuario correcto <code>alfonso ramirez</code>, que vemos que ha tenido un c\u00f3digo 200, es decir, se conecto existosamente.</p>"},{"location":"practica2-2/#tarea-2-borra-las-dos-lineas-que-hacen-referencia-a-la-autenticacion-basica-en-el-location-del-directorio-raiz-tras-ello-anade-un-nuevo-location-debajo-con-la-autenticacion-basica-para-el-archivoseccion-contacthtml-unicamente","title":"Tarea 2.- Borra las dos l\u00edneas que hacen referencia a la autenticaci\u00f3n b\u00e1sica en el location del directorio ra\u00edz. Tras ello, a\u00f1ade un nuevo location debajo con la autenticaci\u00f3n b\u00e1sica para el archivo/secci\u00f3n contact.html \u00fanicamente.","text":"<p>Debido a que la web que estamos utilizandos solo cuenta con un fichero index.html, duplicaremos este fichero renombrandolo como contact.html de la siguiente manera:  <code>sudo cp /var/www/aramirez/index.html /var/www/aramirez/contact.html</code>: </p> <p>El siguiente paso ser\u00e1 modificar el archivo del sitio web con <code>sudo nano /etc/nginx/sites-available/aramirez</code>. </p> <p>Encontraremos esta configuraci\u00f3n y quitamos las opciones de autorizaci\u00f3n de <code>location /</code> y creamos otro que sea: <code>location /contact.html</code> con la siguiente estructura:</p> <p> Guardamos la configuraci\u00f3n con <code>Ctrl + O</code> y salimos con <code>Ctrl + X</code>.</p> <p>Ahora reiniciamos el servidor de nginx con <code>sudo systemctl restart nginx</code> </p> <p>Por \u00faltimo, desde nuestra m\u00e1quina f\u00edsica accedemos al sitio web <code>nombre_sitio/contact.html</code>, donde:</p> <ul> <li><code>nombre_sitio</code>, es el nombre de nuestro sitio, que en mi caso es <code>aramirez</code>. Nos deberiamos encontrar con lo siguiente:   </li> </ul>"},{"location":"practica2-2/#31-combinacion-de-la-autenticacion-basica-con-la-restriccion-de-acceso-por-ip","title":"3.1.- Combinaci\u00f3n de la autenticaci\u00f3n b\u00e1sica con la restricci\u00f3n de acceso por IP","text":"<p>La autenticaci\u00f3n b\u00e1sica HTTP puede ser combinada de forma efectiva con la restricci\u00f3n de acceso por direcci\u00f3n IP. Se puede implementar dos escenarios:</p> <ul> <li>Un usuario debe estar autenticado y tener una IP v\u00e1lida.</li> <li>Un usuario debe de estar autenticado o tener una IP v\u00e1lida.</li> </ul> <p>Se har\u00eda de la siguiente forma:</p> <ol> <li>Permitir o denegar acceso sobre una IP concreta (allows y deny, respectivamente). Dentro del archivo de configuraci\u00f3n de <code>sites-available</code>, que para modificarlo usamos el comando: <code>sudo nano /etc/nginx/sites-available/aramirez</code>. </li> </ol> <p>Dentro del archivo pondremos algo as\u00ed:  Guardamos los cambios con <code>Ctrl + O</code> y salimos con <code>Ctrl + X</code>.</p> <p>El acceso se garantizar\u00e1 a todas las IPs de <code>192.168.1.1/24</code>, excluyendo la direcci\u00f3n <code>192.168.1.119</code> (la de mi ordenador) y denegaremos el acceso a todo el mundo restante con <code>deny all</code>.</p> <p>Ahora probaremos que nos ha bloqueado el acceso, pero primero, reiniciamos el servidor de nginx con <code>sudo systemctl restart nginx</code>: </p> <p>Importante Hay que tener en cuenta que estas directivas se aplican en orden en el que se aparecen en el archivo.</p> <ol> <li>Combinar la restricci\u00f3n IP y la autenticaci\u00f3n con la directiva safely</li> </ol> <p>Si a\u00f1adimos la directiva <code>satisfy all</code>, el acceso se permite si el cliente cumple ambas condiciones (Ip y usuario). Si a\u00f1adimos la directiva <code>satisfy any</code>, permite el acceso si se cumple al menos una de las dos condiciones, por ejemplo: </p>"},{"location":"practica2-2/#tareas_1","title":"Tareas","text":""},{"location":"practica2-2/#tarea-1-configura-nginx-para-que-no-deje-acceder-con-la-ip-de-la-maquina-anfitriona-al-directorio-raiz-de-una-de-tus-dos-webs-modifica-su-server-block-o-archivo-de-configuracion-comprueba-como-se-deniega-el-acceso","title":"Tarea 1.- Configura Nginx para que no deje acceder con la IP de la m\u00e1quina anfitriona al directorio ra\u00edz de una de tus dos webs. Modifica su server block o archivo de configuraci\u00f3n. Comprueba como se deniega el acceso:","text":"<p>Y como podemos ver al acceder al sitio web, nos aparecer\u00e1 el mensaje 403 Forbidden, que eso quiere decir que no tenemos acceso permitido, que era lo que queriamos comprobar. </p> <p>Ahora comprobamos el archivo <code>error.log</code>: </p>"},{"location":"practica2-2/#tarea-2-configura-nginx-para-que-desde-tu-maquina-anfitriona-se-tenga-que-tener-tanto-una-ip-valida-como-un-usuario-valido-ambas-cosas-a-la-vez-y-comprueba-que-si-puede-acceder-sin-problemas","title":"Tarea 2.- Configura Nginx para que desde tu m\u00e1quina anfitriona se tenga que tener tanto una IP v\u00e1lida como un usuario v\u00e1lido, ambas cosas a la vez, y comprueba que s\u00ed puede acceder sin problemas","text":"<p>Ahora accedemos desde mi m\u00e1quina anfitriona: </p> <p>Como vemos nos pide autoizaci\u00f3n, cuando introduzcamos un usuario v\u00e1lido veremos la siguiente pantalla: </p>"},{"location":"practica2-2/#cuestiones-finales","title":"Cuestiones Finales","text":""},{"location":"practica2-2/#cuestion-1-supongamos-que-yo-soy-el-cliente-con-la-ip-17211015-e-intento-acceder-al-directorio-web_muy_guay-de-mi-sitio-web-equivocandome-al-poner-el-usuario-y-contrasena-podre-acceder-por-que","title":"Cuesti\u00f3n 1.- Supongamos que yo soy el cliente con la IP 172.1.10.15 e intento acceder al directorio web_muy_guay de mi sitio web, equivoc\u00e1ndome al poner el usuario y contrase\u00f1a. \u00bfPodr\u00e9 acceder? \u00bfPor qu\u00e9?","text":"<pre><code>location /web_muy_guay {\n  #...\n  satisfy all;\n  deny 172.1.10.6;\n  allow 172.1.10.15;\n  allow 172.1.3.14;\n  deny all;\n  auth_basic \"Cuesti\u00f3n final 1\";\n  auth_basic_user_file conf/htpasswd;\n}\n</code></pre> <p>No podr\u00e1s acceder ya que a pesar de que tu direcci\u00f3n IP est\u00e9 incluida en la lista de IPs permitidas, si te equivocas al introducir tu usuario y contrase\u00f1a, existe la directiva de <code>satisfy all</code>, que significa que tanto la autenticaci\u00f3n debe ser correcta y la IP debe tener permitido su acceso.</p>"},{"location":"practica2-2/#cuestion-2-supongamos-que-yo-soy-el-cliente-con-la-ip-17211015-e-intento-acceder-al-directorio-web_muy_guay-de-mi-sitio-web-introduciendo-correctamente-usuario-y-contrasena-podre-acceder-por-que","title":"Cuesti\u00f3n 2.- Supongamos que yo soy el cliente con la IP 172.1.10.15 e intento acceder al directorio web_muy_guay de mi sitio web, introduciendo correctamente usuario y contrase\u00f1a. \u00bfPodr\u00e9 acceder? \u00bfPor qu\u00e9?","text":"<pre><code>    location /web_muy_guay {\n    #...\n    satisfy all;\n    deny  all;\n    deny  172.1.10.6;\n    allow 172.1.10.15;\n    allow 172.1.3.14;\n\n    auth_basic \"Cuesti\u00f3n final 2: The revenge\";\n    auth_basic_user_file conf/htpasswd;\n\n}\n</code></pre> <p>No, ya que aunque tanto la direcci\u00f3n IP como las credenciales esten permitida y sean correctas respectivamente, el orden de las directivas de nginx son muy importantes y antes de permitir las direcciones IP, est\u00e1 denegandolas todas.</p>"},{"location":"practica2-2/#cuestion-3-supongamos-que-yo-soy-el-cliente-con-la-ip-17211015-e-intento-acceder-al-directorio-web_muy_guay-de-mi-sitio-web-introduciendo-correctamente-usuario-y-contrasena-podre-acceder-por-que","title":"Cuesti\u00f3n 3.- Supongamos que yo soy el cliente con la IP 172.1.10.15 e intento acceder al directorio web_muy_guay de mi sitio web, introduciendo correctamente usuario y contrase\u00f1a. \u00bfPodr\u00e9 acceder? \u00bfPor qu\u00e9?","text":"<pre><code>    location /web_muy_guay {\n    #...\n    satisfy any;\n    deny  172.1.10.6;\n    deny 172.1.10.15;\n    allow 172.1.3.14;\n\n    auth_basic \"Cuesti\u00f3n final 3: The final combat\";\n    auth_basic_user_file conf/htpasswd;\n\n}\n</code></pre> <p>No, ya que con <code>**satisfy any**</code>, cualquiera de las condiciones que se cumpla permitir\u00eda el acceso a la web, pero en este caso no, ya que la direcci\u00f3n IP del cliente se encuentra con el acceso denegado y es prioritaria respecto a la autenticaci\u00f3n.</p>"},{"location":"practica2-2/#cuestion-4-a-lo-mejor-no-sabeis-que-tengo-una-web-para-documentar-todas-mis-excursiones-espaciales-con-jeff-es-esta-jeff-bezos-y-yosupongamos-que-quiero-restringir-el-acceso-al-directorio-de-proyectos-porque-es-muy-secreto-eso-quiere-decir-anadir-autenticacion-basica-a-la-urlproyectoscompleta-la-configuracion-para-conseguirlo","title":"Cuesti\u00f3n 4.- A lo mejor no sab\u00e9is que tengo una web para documentar todas mis excursiones espaciales con Jeff, es esta: Jeff Bezos y yoSupongamos que quiero restringir el acceso al directorio de proyectos porque es muy secreto, eso quiere decir a\u00f1adir autenticaci\u00f3n b\u00e1sica a la URL:ProyectosCompleta la configuraci\u00f3n para conseguirlo:","text":"<pre><code>    server {\n        listen 80;\n        listen [::]:80;\n        root /var/www/freewebsitetemplates.com/preview/space-science;\n        index index.html index.htm index.nginx-debian.html;\n        server_name freewebsitetemplates.com www.freewebsitetemplates.com;\n        location              {\n\n            try_files $uri $uri/ =404;\n        }\n    }\n</code></pre> <p>Tendriamos que a\u00f1adir en <code>location</code> las siguientes l\u00edneas:</p> <pre><code>location /projects.html {\n      auth_basic \"Accediendo a proyectos\";\n      auth_basic_user_file conf/.htpasswd;\n}\n</code></pre>"}]}